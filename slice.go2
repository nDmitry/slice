// Package slice implements some popular helpers for working with slices in functional manner.
//
// Usage:
//
// 		package main
//
//		import "github.com/nDmitry/slice"
//
// 		func main() {
// 			ints := []int{1, 2, 3, 4, 5}
// 			strings := []string{"eat", "a", "cake"}
//
// 			fmt.Println(
// 				slice.Filter(ints, func(item int, _ int) bool { return item%2 == 0 }),
// 				slice.Filter(ints, func(item int, i int) bool { return i%2 == 0 }),
// 				slice.Filter(strings, func(item string, _ int) bool { return len(item) == 4 }),
//
// 				slice.Some(ints, func(item int, _ int) bool { return item%2 == 0 }),
// 				slice.Every(ints, func(item int, _ int) bool { return item%2 == 0 }),
//
// 				slice.Find(ints, func(item int, _ int) bool { return item%2 == 0 }),
// 				slice.FindLast(ints, func(item int, _ int) bool { return item%2 == 0 }),
// 				slice.FindIndex(ints, func(item int, _ int) bool { return item%2 == 0 }),
// 				slice.FindLastIndex(ints, func(item int, _ int) bool { return item%2 == 0 }),
//
// 				slice.Map(ints, func(item int, _ int) int { return item * item }),
// 				slice.Map(ints, func(item int, _ int) float64 { return float64(item) * 0.5 }),
//
// 				slice.Reduce(ints, func(sum int, item int, _ int) int { return sum + item }, 0),
// 			)
// 		}

package slice

type Predicate[T any] func(item T, i int) bool
type Mapper[T1 any, T2 any] func(item T1, i int) T2
type Accumulator[T1 any, T2 any] func(res T2, item T1, i int) T2

// Filter returns a new slice consisting of the elements of []T that match the given predicate.
func Filter[T any](s []T, p Predicate[T]) []T {
	result := make([]T, 0, len(s))

	for i, item := range s {
		if p(item, i) {
			result = append(result, item)
		}
	}

	return result
}

// Some returns true when some of the elements of []T match the given predicate.
func Some[T any](s []T, p Predicate[T]) bool {
	for i, item := range s {
		if p(item, i) {
			return true
		}
	}

	return false
}

// Every returns true when all of the elements of []T match the given predicate.
func Every[T any](s []T, p Predicate[T]) bool {
	for i, item := range s {
		if p(item, i) {
			continue
		}

		return false
	}

	return true
}

// Find returns a first element of []T that matches the given predicate.
func Find[T any](s []T, p Predicate[T]) *T {
	for i, item := range s {
		if p(item, i) {
			return &item
		}
	}

	return nil
}

// FindLast returns a last element of []T that matches the given predicate.
func FindLast[T any](s []T, p Predicate[T]) *T {
	for i := len(s) - 1; i >= 0; i-- {
		if p(s[i], i) {
			return &s[i]
		}
	}

	return nil
}

// Find returns an index of the first element of []T that matches the given predicate.
func FindIndex[T any](s []T, p Predicate[T]) int {
	for i, item := range s {
		if p(item, i) {
			return i
		}
	}

	return -1
}

// Find returns an index of the last element of []T that matches the given predicate.
func FindLastIndex[T any](s []T, p Predicate[T]) int {
	for i := len(s) - 1; i >= 0; i-- {
		if p(s[i], i) {
			return i
		}
	}

	return -1
}

// Map returns a new slice consisting of the results of applying the given function to the elements of []T.
func Map[T1 any, T2 any](s []T1, m Mapper[T1, T2]) []T2 {
	result := make([]T2, len(s))

	for i, item := range s {
		result[i] = m(item, i)
	}

	return result
}

// Reduce returns a single value as a result of a reduction on the elements of []T using an accumulation function and a starting value.
func Reduce[T1 any, T2 any](s []T1, a Accumulator[T1, T2], initializer T2) T2 {
	result := initializer

	for i, item := range s {
		result = a(result, item, i)
	}

	return result
}
